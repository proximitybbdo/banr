package be.proximitybbdo.banrcheckr {  import flash.display.Sprite;  import flash.events.NativeDragEvent;  import flash.desktop.NativeDragManager;  import flash.display.MovieClip;  import flash.desktop.NativeDragActions;  import flash.filesystem.File;  import flash.desktop.ClipboardFormats;  import flash.display.Loader;  import flash.net.URLRequest;  import flash.events.Event;  import flash.events.IOErrorEvent;  import flash.utils.setTimeout;  import flash.display.BitmapData;  import flash.net.FileReference;  import flash.utils.ByteArray;  import com.adobe.images.PNGEncoder;  import com.adobe.images.JPGEncoder;  import flash.errors.IllegalOperationError;  import flash.errors.MemoryError;  import flash.utils.Timer;  import flash.events.TimerEvent;  import flash.filesystem.FileStream;  import flash.filesystem.FileMode;  public class App extends Sprite { 		public var dragdropr:MovieClip;	public var container:MovieClip;		private var containercontent:MovieClip;	private var containermask:MovieClip;		private var imageByteArray:ByteArray;	private var saveFileType:String;	private var saveFileRef:File;	private var loadr:Loader;	private var activeFile:File;		private var w:Number;	private var h:Number;	    public function App() {		this.addEventListener(Event.ADDED_TO_STAGE, run);				dragdropr.addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER, onDragIn);		dragdropr.addEventListener(NativeDragEvent.NATIVE_DRAG_DROP, onDrop);		dragdropr.addEventListener(NativeDragEvent.NATIVE_DRAG_EXIT, onDragExit);    }		private function run(e:Event):void {		containercontent = (container.getChildByName("content") as MovieClip);		containermask = (container.getChildByName("containermask") as MovieClip);				trace(containercontent);				containercontent.mask = containermask;				loadr = new Loader(); 		containercontent.addChild(loadr);	}    public function onDragIn(event:NativeDragEvent):void{		NativeDragManager.acceptDragDrop(dragdropr);    }    public function onDrop(event:NativeDragEvent):void{     	NativeDragManager.dropAction = NativeDragActions.COPY;            	var dropfiles:Object = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT); //.dataForFormat(transfa.FILE_LIST_FORMAT) as Array;      	for each (var file:File in dropfiles) {        	switch (file.extension) {          		case "swf":            	trace("swf: " + file.name);				activeFile = file;				load_swf(file.url);				break;			  case "png":			  case "jpg":			  case "gif":				trace("image: " + file.name);				break;			  default:				trace("wrong filetype, choose swf");			}		}    }    public function onDragExit(event:NativeDragEvent):void{      trace("Drag exit event.");    }	private function load_swf(path:String):void {		var url:URLRequest = new URLRequest(path); 				loadr.contentLoaderInfo.addEventListener(Event.COMPLETE, on_load_complete);		loadr.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, on_load_error);		loadr.load(url); 	}		private function on_load_complete(e:Event):void {		trace("load complete");				w = loadr.contentLoaderInfo.width;		h = loadr.contentLoaderInfo.height;				containermask.width = w;		containermask.height = h;				setTimeout(save_as_jpg, 15000, container);	}		private function on_load_error(e:IOErrorEvent):void {		trace("Error loading file");	}		private function get_bitmap_data(container:MovieClip):BitmapData{				trace(container.height);		trace(containermask.height);		    	var bd:BitmapData = new  BitmapData(containermask.width, containermask.height);        bd.draw(container);        return bd;     }		private function save_as_jpg(container:MovieClip):void{		var jpgEncoder:JPGEncoder = new JPGEncoder(100);		imageByteArray = jpgEncoder.encode(get_bitmap_data(container));		saveFileRef = new File();    			saveFileRef.nativePath = activeFile.nativePath;				trace(saveFileRef.nativePath);		var ext:String;		switch(saveFileType){			case "JPG":				ext = ".jpg";				break;			case "PNG":				ext = ".png";				break;		}				if(saveFileRef.extension  == null){			saveFileRef.nativePath += ext;		}				saveFileRef.nativePath = saveFileRef.nativePath.split(".")[0] + ".jpg";				var stream:FileStream = new FileStream();		stream.open(saveFileRef,  FileMode.WRITE);		stream.writeBytes(imageByteArray,  0, imageByteArray.length);		stream.close(); }	    /*	private function addImage(nativePath:String):void{      var i:Image = new Image();      if(Capabilities.os.search("Mac") >= 0){        i.source = "file://" + nativePath;      } else {        i.source = nativePath;      }      this.addChild(i);    }	*/  }}